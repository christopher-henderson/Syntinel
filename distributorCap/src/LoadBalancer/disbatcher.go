package main

import (
	"encoding/json"
	"fmt"
	"io"

	"net/http"

	"time"
)

func executeJob(j job) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	dockerfile := `FROM docker.io/centos

MAINTAINER Christopher Henderson

RUN yum install -y go git wget
COPY script.sh $HOME/script.sh
CMD chmod +x script.sh && ./script.sh`
	script := `
  !/usr/bin/env bash
git clone https://github.com/christopher-henderson/TestTheTester.git && cd TestTheTester/GoBeInGoodHands && go test . -v -cover
`
	obj := struct {
		ID                   int    `json:"id"`
		Dockerfile           string `json:"dockerfile"`
		Script               string `json:"script"`
		EnvironmentVariables string `json:"environmentVairables"`
	}{1, dockerfile, script, "a=b"}
	r, w := io.Pipe()
	json.NewEncoder(w).Encode(obj)
	req, err := http.NewRequest("POST", "http://localhost:9093/test/run", r)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	fmt.Print("Executed: ")
	fmt.Println(j.Id)

}

func scheduleJob(j job) {
	fmt.Println("scheduling job")
	time.Sleep(time.Duration(j.Interval) * time.Second)
	tmp := jobMap.Get(j.Id)

	if tmp.Canceled == false {
		go scheduleJob(j)
		go executeJob(j)

	} else {
		jobMap.Delete(j.Id)
	}
}
