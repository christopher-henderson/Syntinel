package Scheduler

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"../DAO"
)

func executeJob(j DAO.Job) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	payload, err := json.Marshal(map[string]int{"test": j.Id})
	if err != nil {
		log.Println(err)
		return
	}
	req, err := http.NewRequest("POST", "http://localhost/api/v1/testrun/", bytes.NewBuffer(payload))

	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()

	fmt.Print("Executed: " + fmt.Sprint(j.Id))

}

func ScheduleAndRunJob(j DAO.Job) {
	DAO.PutJob(j.Id, j)
	go ScheduleJob(j)
}

func CancelJob(j DAO.Job) {
	tmp := DAO.GetJob(j.Id)
	tmp.Canceled = true
	DAO.PutJob(tmp.Id, tmp)
}

func KillJob(j DAO.Job) {
	tmp := DAO.GetJob(j.Id)
	url := tmp.LastExecutor
	log.Print("Should Send kill to ")
	log.Print(url.Host)
	log.Print(" with Test ID")
	log.Println(j.Id)

	//send del Request to executor to kill job
	toSend := "http://" + fmt.Sprint(url.Host) + "/test/run?testID=" + fmt.Sprint(j.Id)
	log.Println(toSend)
	req, err := http.NewRequest("DELETE", "http://"+fmt.Sprint(url.Host)+"/test/run?testID="+fmt.Sprint(j.Id), nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()

}

func ScheduleJob(j DAO.Job) {
	fmt.Println("scheduling job")
	time.Sleep(time.Duration(j.Interval) * time.Second)
	tmp := DAO.GetJob(j.Id)

	if tmp.Canceled == false && tmp.Interval != 0 && tmp.Id != 0 {
		go ScheduleJob(j)
		go executeJob(j)

	} else {
		log.Println("erased job")
		DAO.RemoveJob(j.Id)
	}
}
